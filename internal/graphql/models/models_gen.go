// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Node interface {
	IsNode()
	GetID() string
}

type CancelOrderInput struct {
	OrderID string  `json:"orderId"`
	Reason  *string `json:"reason,omitempty"`
}

type CancelOrderPayload struct {
	Order  *Order        `json:"order,omitempty"`
	Errors []*OrderError `json:"errors"`
}

type CreateOrderInput struct {
	UserID string            `json:"userId"`
	Items  []*OrderItemInput `json:"items"`
}

type CreateOrderPayload struct {
	Order  *Order        `json:"order,omitempty"`
	Errors []*OrderError `json:"errors"`
}

type CreateProductInput struct {
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Price       float64 `json:"price"`
	Stock       int     `json:"stock"`
	Category    string  `json:"category"`
}

type CreateProductPayload struct {
	Product *Product        `json:"product,omitempty"`
	Errors  []*ProductError `json:"errors"`
}

type CreateUserInput struct {
	Name  string `json:"name"`
	Email string `json:"email"`
	Phone string `json:"phone"`
}

type CreateUserPayload struct {
	User   *User        `json:"user,omitempty"`
	Errors []*UserError `json:"errors"`
}

type DeleteProductInput struct {
	ID string `json:"id"`
}

type DeleteProductPayload struct {
	DeletedProductID *string         `json:"deletedProductId,omitempty"`
	Errors           []*ProductError `json:"errors"`
}

type DeleteUserInput struct {
	ID string `json:"id"`
}

type DeleteUserPayload struct {
	DeletedUserID *string      `json:"deletedUserId,omitempty"`
	Errors        []*UserError `json:"errors"`
}

type FilterInput struct {
	Field    string         `json:"field"`
	Operator FilterOperator `json:"operator"`
	Value    string         `json:"value"`
}

type Mutation struct {
}

type Order struct {
	ID             string       `json:"id"`
	User           *User        `json:"user"`
	Items          []*OrderItem `json:"items"`
	TotalAmount    float64      `json:"totalAmount"`
	Status         OrderStatus  `json:"status"`
	CreatedAt      string       `json:"createdAt"`
	UpdatedAt      string       `json:"updatedAt"`
	ItemCount      int          `json:"itemCount"`
	CanBeCancelled bool         `json:"canBeCancelled"`
}

type OrderConnection struct {
	Edges      []*OrderEdge `json:"edges"`
	PageInfo   *PageInfo    `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

type OrderEdge struct {
	Node   *Order `json:"node"`
	Cursor string `json:"cursor"`
}

type OrderError struct {
	Field   *string   `json:"field,omitempty"`
	Message string    `json:"message"`
	Code    ErrorCode `json:"code"`
}

type OrderItem struct {
	ID           string   `json:"id"`
	Product      *Product `json:"product"`
	ProductName  string   `json:"productName"`
	ProductPrice float64  `json:"productPrice"`
	Quantity     int      `json:"quantity"`
	Total        float64  `json:"total"`
}

type OrderItemInput struct {
	ProductID string `json:"productId"`
	Quantity  int    `json:"quantity"`
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type PaginationInput struct {
	First  *int    `json:"first,omitempty"`
	After  *string `json:"after,omitempty"`
	Last   *int    `json:"last,omitempty"`
	Before *string `json:"before,omitempty"`
}

type Product struct {
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	Description string      `json:"description"`
	Price       float64     `json:"price"`
	Stock       int         `json:"stock"`
	Category    string      `json:"category"`
	CreatedAt   string      `json:"createdAt"`
	UpdatedAt   string      `json:"updatedAt"`
	IsInStock   bool        `json:"isInStock"`
	StockStatus StockStatus `json:"stockStatus"`
}

type ProductCategory struct {
	Name  string `json:"name"`
	Count int    `json:"count"`
}

type ProductConnection struct {
	Edges      []*ProductEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

type ProductEdge struct {
	Node   *Product `json:"node"`
	Cursor string   `json:"cursor"`
}

type ProductError struct {
	Field   *string   `json:"field,omitempty"`
	Message string    `json:"message"`
	Code    ErrorCode `json:"code"`
}

type Query struct {
}

type SearchInput struct {
	Query   *string        `json:"query,omitempty"`
	Filters []*FilterInput `json:"filters,omitempty"`
}

type Subscription struct {
}

type UpdateOrderStatusInput struct {
	OrderID string      `json:"orderId"`
	Status  OrderStatus `json:"status"`
}

type UpdateOrderStatusPayload struct {
	Order  *Order        `json:"order,omitempty"`
	Errors []*OrderError `json:"errors"`
}

type UpdateProductInput struct {
	ID          string   `json:"id"`
	Name        *string  `json:"name,omitempty"`
	Description *string  `json:"description,omitempty"`
	Price       *float64 `json:"price,omitempty"`
	Stock       *int     `json:"stock,omitempty"`
	Category    *string  `json:"category,omitempty"`
}

type UpdateProductPayload struct {
	Product *Product        `json:"product,omitempty"`
	Errors  []*ProductError `json:"errors"`
}

type UpdateProductStockInput struct {
	ProductID string `json:"productId"`
	Quantity  int    `json:"quantity"`
}

type UpdateProductStockPayload struct {
	Product *Product        `json:"product,omitempty"`
	Errors  []*ProductError `json:"errors"`
}

type UpdateUserInput struct {
	ID    string  `json:"id"`
	Name  *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
	Phone *string `json:"phone,omitempty"`
}

type UpdateUserPayload struct {
	User   *User        `json:"user,omitempty"`
	Errors []*UserError `json:"errors"`
}

type User struct {
	ID        string           `json:"id"`
	Name      string           `json:"name"`
	Email     string           `json:"email"`
	Phone     string           `json:"phone"`
	CreatedAt string           `json:"createdAt"`
	UpdatedAt string           `json:"updatedAt"`
	Orders    *OrderConnection `json:"orders"`
}

type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor string `json:"cursor"`
}

type UserError struct {
	Field   *string   `json:"field,omitempty"`
	Message string    `json:"message"`
	Code    ErrorCode `json:"code"`
}

type ErrorCode string

const (
	ErrorCodeValidationError ErrorCode = "VALIDATION_ERROR"
	ErrorCodeNotFound        ErrorCode = "NOT_FOUND"
	ErrorCodeAlreadyExists   ErrorCode = "ALREADY_EXISTS"
	ErrorCodeUnauthorized    ErrorCode = "UNAUTHORIZED"
	ErrorCodeInternalError   ErrorCode = "INTERNAL_ERROR"
)

var AllErrorCode = []ErrorCode{
	ErrorCodeValidationError,
	ErrorCodeNotFound,
	ErrorCodeAlreadyExists,
	ErrorCodeUnauthorized,
	ErrorCodeInternalError,
}

func (e ErrorCode) IsValid() bool {
	switch e {
	case ErrorCodeValidationError, ErrorCodeNotFound, ErrorCodeAlreadyExists, ErrorCodeUnauthorized, ErrorCodeInternalError:
		return true
	}
	return false
}

func (e ErrorCode) String() string {
	return string(e)
}

func (e *ErrorCode) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ErrorCode", str)
	}
	return nil
}

func (e ErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ErrorCode) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ErrorCode) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type FilterOperator string

const (
	FilterOperatorEquals      FilterOperator = "EQUALS"
	FilterOperatorNotEquals   FilterOperator = "NOT_EQUALS"
	FilterOperatorContains    FilterOperator = "CONTAINS"
	FilterOperatorStartsWith  FilterOperator = "STARTS_WITH"
	FilterOperatorEndsWith    FilterOperator = "ENDS_WITH"
	FilterOperatorGreaterThan FilterOperator = "GREATER_THAN"
	FilterOperatorLessThan    FilterOperator = "LESS_THAN"
	FilterOperatorIn          FilterOperator = "IN"
	FilterOperatorNotIn       FilterOperator = "NOT_IN"
)

var AllFilterOperator = []FilterOperator{
	FilterOperatorEquals,
	FilterOperatorNotEquals,
	FilterOperatorContains,
	FilterOperatorStartsWith,
	FilterOperatorEndsWith,
	FilterOperatorGreaterThan,
	FilterOperatorLessThan,
	FilterOperatorIn,
	FilterOperatorNotIn,
}

func (e FilterOperator) IsValid() bool {
	switch e {
	case FilterOperatorEquals, FilterOperatorNotEquals, FilterOperatorContains, FilterOperatorStartsWith, FilterOperatorEndsWith, FilterOperatorGreaterThan, FilterOperatorLessThan, FilterOperatorIn, FilterOperatorNotIn:
		return true
	}
	return false
}

func (e FilterOperator) String() string {
	return string(e)
}

func (e *FilterOperator) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FilterOperator(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FilterOperator", str)
	}
	return nil
}

func (e FilterOperator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *FilterOperator) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e FilterOperator) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type OrderStatus string

const (
	OrderStatusPending    OrderStatus = "PENDING"
	OrderStatusConfirmed  OrderStatus = "CONFIRMED"
	OrderStatusProcessing OrderStatus = "PROCESSING"
	OrderStatusShipped    OrderStatus = "SHIPPED"
	OrderStatusDelivered  OrderStatus = "DELIVERED"
	OrderStatusCancelled  OrderStatus = "CANCELLED"
)

var AllOrderStatus = []OrderStatus{
	OrderStatusPending,
	OrderStatusConfirmed,
	OrderStatusProcessing,
	OrderStatusShipped,
	OrderStatusDelivered,
	OrderStatusCancelled,
}

func (e OrderStatus) IsValid() bool {
	switch e {
	case OrderStatusPending, OrderStatusConfirmed, OrderStatusProcessing, OrderStatusShipped, OrderStatusDelivered, OrderStatusCancelled:
		return true
	}
	return false
}

func (e OrderStatus) String() string {
	return string(e)
}

func (e *OrderStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatus", str)
	}
	return nil
}

func (e OrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OrderStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OrderStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type Role string

const (
	RoleUser    Role = "USER"
	RoleAdmin   Role = "ADMIN"
	RoleManager Role = "MANAGER"
)

var AllRole = []Role{
	RoleUser,
	RoleAdmin,
	RoleManager,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser, RoleAdmin, RoleManager:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Role) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Role) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type StockStatus string

const (
	StockStatusInStock    StockStatus = "IN_STOCK"
	StockStatusLowStock   StockStatus = "LOW_STOCK"
	StockStatusOutOfStock StockStatus = "OUT_OF_STOCK"
)

var AllStockStatus = []StockStatus{
	StockStatusInStock,
	StockStatusLowStock,
	StockStatusOutOfStock,
}

func (e StockStatus) IsValid() bool {
	switch e {
	case StockStatusInStock, StockStatusLowStock, StockStatusOutOfStock:
		return true
	}
	return false
}

func (e StockStatus) String() string {
	return string(e)
}

func (e *StockStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StockStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StockStatus", str)
	}
	return nil
}

func (e StockStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *StockStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e StockStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
